---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: refractr-stage
  labels:
    app: refractr
spec:
  releaseName: refractr-ingress-nginx
  chart:
    repository: https://kubernetes.github.io/ingress-nginx
    name: ingress-nginx
    version: "4.2.0"
  values:
    controller:
      ingressClassResource:
        name: ingress-nginx-refractr-stage
        enabled: true
        default: false
        controllerValue: "k8s.io/ingress-nginx-refractr-stage"
      enableCustomResources: false
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 4
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi
      admissionWebhooks:
        enable: false
      scope:
        enabled: true
      config:
        use-proxy-protocol: "false"
        use-forwarded-headers: "true"
        # restrict this to the IP addresses of ELB
        proxy-real-ip-cidr: "0.0.0.0/0"
        # HSTS disable here, to be picked up by refractr during redirect
        hsts: "false"
        # SE-3010 Prefer 301 instead of 308 as older browsers do not support 308
        http-redirect-code: "301"
        # SE-3010 Support IE 11 on windows older than 10
        # This does make us vulnerable to POODLE and HEARTBLEED,
        # but since refractr has no user input that should be ok
        ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA"
        ssl-protocols: "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"
      service:
        externalTrafficPolicy: "Local"
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
          service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=stage"
          # not really well documented except for this here:
          # https://github.com/kubernetes/kubernetes/issues/63959
          service.beta.kubernetes.io/aws-load-balancer-eip-allocations: "eipalloc-0448300623ab0783f,eipalloc-0787184616f563acb,eipalloc-05cc86db2fa7c78ed"
          external-dns.alpha.kubernetes.io/hostname: "stage.mozilla-redirects.xyz,stage.refractr.mozit.cloud"
      metrics:
        enabled: true
        service:
          annotations:
            prometheus.io/scrape: "false"
            prometheus.io/port: "10254"
    rbac:
      create: true
      scope: true
